{"version":3,"file":"silkrouter.js","sources":["../../src/js/utils/constants.js","../../src/js/utils/libs.js","../../src/js/utils/params.js","../../src/js/utils/query.js","../../src/js/utils/helpers.js","../../src/js/silkrouter.js"],"sourcesContent":["/**\n * Router constants\n */\nexport const HASH_CHANGE = 'hashchange';\nexport const POP_STATE = 'popstate';\nexport const ROUTE_CHANGED = 'route.changed';\nexport const REG_ROUTE_PARAMS = /:[^\\/]+/g;\nexport const REG_PATHNAME = /^\\/(?=[^?]*)/;\nexport const REG_HASH_QUERY = /\\?.+/;\nexport const REG_TRIM_SPECIALCHARS = /^([^a-zA-Z0-9]+)|([^a-zA-Z0-9]+)$/g;\nexport const INVALID_ROUTE = 'Route string is not a pure route';\nexport const CASE_INSENSITIVE_FLAG = '$$';","import LZStorage from 'lzstorage';\n\nconst store = new LZStorage({\n    compression: true\n});\n\n/**\n * Store library\n * @namespace libs\n * @type {object}\n * @private\n */\nexport const libs = {\n    /**\n     * Get's decompressed data from store\n     * @private\n     * @method getDataFromStore\n     * @memberof libs\n     * @param {string} path URL path\n     * @param {boolean} isHash Flag to determine if it's a pathname or hash\n     * @returns {*}\n     */\n    getDataFromStore(path, isHash) {\n        const paths = store.get('routeStore') || {};\n        return paths[`${isHash ? '#' : ''}${path}`];\n    },\n    /**\n     * @private\n     * @method setDataToStore\n     * @memberof libs\n     * @param {string} path URL path\n     * @param {boolean} isHash Flag to determine if it's a pathname or hash\n     * @param {any} data Data\n     * @returns {boolean}\n     */\n    setDataToStore(path, isHash, data) {\n        let paths = store.get('routeStore') || {};\n        if (paths[path]) {\n            if (\n                !data\n                || (\n                    typeof data === 'object'\n                    && Object.keys(data).length === 0\n                )\n            ) {\n                // Don't change existing data\n                return false;\n            }\n        }\n        paths = {\n            ...paths,\n            [`${isHash ? '#' : ''}${path}`]: data\n        };\n        return store.set('routeStore', paths, true);\n    },\n    /**\n     * @namespace handlers\n     * @type {object[]}\n     * @private\n     */\n    handlers: []\n};","import { REG_ROUTE_PARAMS, REG_TRIM_SPECIALCHARS } from './constants';\n\n/**\n * Helper functions to test and extract params\n */\n\n/**\n * Tests if route has parameters\n * @private\n * @param {string} expr Route expression\n * @returns {boolean}\n */\nexport function hasParams(expr) {\n    return REG_ROUTE_PARAMS.test(expr);\n};\n\n/**\n * Parses current path and returns params object\n * @private\n * @param {string} expr Route expression\n * @param {string} path URL path\n * @returns {object}\n */\nexport function extractParams(expr, path = window.location.pathname) {\n    if (hasParams(expr)) {\n        const pathRegex = new RegExp(expr.replace(/\\//g, \"\\\\/\").replace(/:[^\\/\\\\]+/g, \"([^\\\\/]+)\"));\n        const params = {};\n        if (pathRegex.test(path)) {\n            REG_ROUTE_PARAMS.lastIndex = 0;\n            const keys = [...expr.match(REG_ROUTE_PARAMS)].map(key => key.replace(REG_TRIM_SPECIALCHARS, ''));\n            const values = [...path.match(pathRegex)];\n            values.shift();\n            keys.forEach((key, index) => {\n                params[key] = values[index];\n            });\n        }\n        return params;\n    }\n    return {};\n}","/**\n * Builds query string recursively\n * @private\n * @param {string[]} queryStringParts List of query string key value pairs\n * @param {*} key Key\n * @param {*} obj Value\n */\nfunction buildQueryString(queryStringParts, key, obj) {\n    if (obj && typeof obj === 'object') {\n        Object.keys(obj).forEach(obKey => {\n            buildQueryString(queryStringParts, `${key}[${obKey}]`, obj[obKey]);\n        });\n    } else if (['string', 'number', 'boolean', 'undefined', 'object'].indexOf(typeof obj) > -1) {\n        queryStringParts.push(`${key}=${obj}`);\n    }\n}\n\n/**\n * Converts an object to a query string\n * @private\n * @param {object} obj Object which should be converted to a string\n * @returns {string}\n */\nexport function toQueryString(obj) {\n    let queryStringParts = [];\n    if (obj && typeof obj === 'object') {\n        Object.keys(obj).forEach(key => {\n            buildQueryString(queryStringParts, key, obj[key]);\n        });\n        return queryStringParts.join('&');\n    } else if (typeof obj === 'string') {\n        return obj;\n    }\n    return '';\n}","import deparam from 'deparam.js';\nimport { POP_STATE, HASH_CHANGE, ROUTE_CHANGED, INVALID_ROUTE, REG_HASH_QUERY, REG_PATHNAME, CASE_INSENSITIVE_FLAG } from './constants';\nimport { libs } from './libs';\nimport { extractParams } from './params';\nimport { toQueryString } from './query';\n\n/**\n * Triggers \"route.changed\" event\n * @private\n * @param {object} config Route event configuration\n * @param {object} config.originalEvent Original \"popstate\" event object\n * @param {string} config.route route string\n * @param {string} config.type Type of event\n * @param {boolean} config.hash Flag that determines type of event expected\n * @param {object} config.originalData Original data persisted by history API\n */\nfunction triggerRoute({ originalEvent = {}, route, type, hash = false, originalData = {} }) {\n    trigger(\n        ROUTE_CHANGED,\n        {\n            originalEvent,\n            route,\n            type,\n            hash\n        },\n        originalData\n    );\n}\n\n/**\n * Checks if given route is valid\n * @private\n * @param {string} route Route string\n */\nfunction isValidRoute(route) {\n    if (typeof route === \"string\") {\n        return REG_PATHNAME.test(route);\n    };\n    return false;\n}\n\n/**\n * Adds a query string\n * @private\n * @param {string} route Route string\n * @param {string} qString Query string\n * @param {boolean} appendQString Append query string flag\n */\nfunction resolveQuery(route = '', isHash = false, queryString = '', append = false) {\n    queryString = queryString.charAt(0) === '?' ? queryString.substring(1).trim() : queryString.trim();\n    if (!isHash) {\n        if (append) {\n            if (queryString) {\n                return `${route}${location.search}&${queryString}`;\n            }\n            return `${route}${location.search}`;\n        } else if (queryString) {\n            return `${route}?${queryString}`;\n        }\n        return route;\n    } else if (queryString) {\n        return `${location.pathname}${location.search}#${route}?${queryString}`;\n    }\n    return `${location.pathname}${location.search}#${route}`;\n}\n\n/**\n * Converts current query string into an object\n * @private\n */\nfunction getQueryParams(coerce = false) {\n    const qsObject = deparam(window.location.search, coerce);\n    let hashStringParams = {};\n    if (window.location.hash.match(REG_HASH_QUERY)) {\n        hashStringParams = {\n            ...hashStringParams,\n            ...deparam(window.location.hash.match(REG_HASH_QUERY)[0], coerce)\n        };\n    }\n    return {\n        ...qsObject,\n        ...hashStringParams\n    };\n}\n\n/**\n * Set route for given view\n * @private\n * @param {string|object} oRoute Route string or object\n * @param {boolean} replaceMode Replace mode\n * @param {boolean} noTrigger Do not trigger handler\n */\nexport function execRoute(route = {}, replaceMode = false, noTrigger = false) {\n    let routeObject = typeof route === 'string' ? { route } : {\n        ...route\n    };\n    routeObject = {\n        ...routeObject,\n        replaceMode,\n        noTrigger\n    };\n    const {\n        route: sroute,\n        replaceMode: rm,\n        noTrigger: nt,\n        queryString: qs = '',\n        data,\n        title = null,\n        appendQuery\n    } = routeObject;\n    if (typeof sroute === 'string') {\n        const isHash = sroute.charAt(0) === '#' ? 1 : 0;\n        let [pureRoute, queryString = ''] = sroute.trim().split('?');\n        const routeMethod = `${rm ? 'replace' : 'push'}State`;\n        queryString = toQueryString(queryString || qs);\n        pureRoute = pureRoute.substring(isHash);\n        if (isValidRoute(pureRoute)) {\n            libs.setDataToStore(pureRoute, isHash === 1, data);\n            const completeRoute = resolveQuery(pureRoute, isHash === 1, queryString, appendQuery);\n            history[routeMethod]({ data }, title, completeRoute);\n            if (!nt) {\n                triggerRoute(\n                    {\n                        route: `${isHash ? '#' : ''}${pureRoute}`,\n                        type: (isHash ? HASH_CHANGE : POP_STATE),\n                        hash: (isHash === 1)\n                    }\n                );\n            }\n        } else {\n            throw new Error(INVALID_ROUTE);\n        }\n    }\n}\n\n/**\n * Binds generic route if route is passed as a list of URLs\n * @param {string[]} route Array of routes\n * @param {*} handler Handler function\n */\nfunction bindGenericRoute(route, handler) {\n    if (libs.handlers.filter(ob => (ob.prevHandler === handler)).length) {\n        return;\n    }\n    bindRoute((...args) => {\n        if (typeof handler === 'function') {\n            const [e] = args;\n            let compareRoute = e.route;\n            if (compareRoute.charAt(0) === '#') {\n                compareRoute = compareRoute.substring(1);\n            }\n            if (route.indexOf(compareRoute) > -1) {\n                handler.apply(this, args);\n            } else if (\n                route.indexOf(`#${compareRoute}`) > -1\n                && e.hash\n            ) {\n                handler.apply(this, args);\n            }\n        }\n    }, handler);\n}\n\n/**\n * Attaches a route handler function\n * @private\n * @param {string} route Route string\n * @param {function} handler Callback function\n */\nexport function bindRoute(route, handler, prevHandler) {\n    // Resolve generic route\n    let isCaseInsensitive = false;\n    if (typeof route === 'function') {\n        prevHandler = handler;\n        handler = route;\n        route = '*';\n    }\n    if (Array.isArray(route)) {\n        bindGenericRoute(route, handler);\n        return;\n    }\n    if (route.indexOf(CASE_INSENSITIVE_FLAG) === 0) {\n        isCaseInsensitive = true;\n        route = route.substring(CASE_INSENSITIVE_FLAG.length);\n    }\n    const startIndex = route.charAt(0) === '#' ? 1 : 0;\n    route = route.substring(startIndex);\n    // Check existence\n    const exists = libs.handlers.filter(ob => (ob.handler === handler && ob.route === route)).length;\n    // Attach handler\n    if (!exists && typeof handler === 'function') {\n        libs.handlers.push({\n            eventName: ROUTE_CHANGED,\n            handler,\n            prevHandler,\n            route,\n            hash: startIndex === 1,\n            isCaseInsensitive\n        });\n    }\n    // Execute handler if matches current route (Replaces init method in version 2.0)\n    const { pathname, hash } = window.location;\n    const paths = startIndex === 1 ? [hash] : [pathname, hash];\n    paths.filter(path => path.trim()).forEach(currentPath => {\n        let cRoute = route;\n        let cCurrentPath = currentPath;\n        if (isCaseInsensitive) {\n            cRoute = cRoute.toLowerCase();\n            cCurrentPath = cCurrentPath.toLowerCase();\n        }\n        const pathIndex = currentPath.charAt(0) === '#' ? 1 : 0;\n        const { hasMatch, data, params } = testRoute(cRoute, cCurrentPath);\n        if (hasMatch && typeof handler === 'function') {\n            handler({\n                route: currentPath,\n                hash: pathIndex === 1,\n                eventName: pathIndex === 1 ? HASH_CHANGE : POP_STATE,\n                data,\n                params,\n                query: getQueryParams(),\n                isCaseInsensitive\n            });\n        }\n    });\n}\n\n/**\n * Unbinds route handlers\n * @private\n * @param {string} route Route string\n * @param {function} handler Callback function\n */\nexport function unbindRoute(...args) {\n    let [route, handler] = args;\n    const prevLength = libs.handlers.length;\n    let isRouteList = false;\n    if (args.length === 0) {\n        libs.handlers.length = 0;\n    }\n    if (Array.isArray(route)) {\n        route = '*';\n        isRouteList = true;\n    }\n    libs.handlers = libs.handlers.filter(ob => {\n        if (args.length === 1 && typeof args[0] === 'string' && !isRouteList) {\n            return ob.route !== route;\n        }\n        // Check for generic route\n        if (args.length === 1 && typeof args[0] === 'function') {\n            handler = args[0];\n            route = '*'; // Generic route\n        }\n        return !(ob.route === route && (\n            ob.handler === handler\n            || ob.prevHandler === handler\n        ));\n    });\n    return (prevLength > libs.handlers.length);\n}\n\n\n/**\n * Compares route with current URL\n * @private\n * @param {string} route Route string\n * @param {string} url Current url\n * @param {object} params Parameters\n */\nfunction testRoute(route, url, originalData = {}) {\n    const isHash = url.charAt(0) === '#';\n    if (isHash) {\n        url = url.substring(1);\n    }\n    const [path] = url.split('?');\n    if (!!Object.keys(originalData).length) {\n        libs.setDataToStore(path, isHash, originalData); // Sync store with event data.\n    }\n    const data = libs.getDataFromStore(path, isHash);\n    const params = extractParams(route, url);\n    let hasMatch = Object.keys(params).length > 0 || (\n        isValidRoute(url) && ((route === url) || (route === '*'))\n    );\n    return {\n        hasMatch,\n        data,\n        params\n    };\n}\n\n/**\n * Triggers a router event\n * @private\n * @param {string} eventName Name of route event\n * @param {object} params Parameters\n */\nfunction execListeners(eventName, routeConfig, originalData = {}) {\n    const { hash: isHash } = routeConfig;\n    const { hash, pathname } = window.location;\n    libs.handlers.forEach(ob => {\n        if (ob.eventName === eventName) {\n            let cRoute = ob.route;\n            let cCurrentPath = (isHash ? hash : pathname);\n            if (ob.isCaseInsensitive) {\n                cRoute = cRoute.toLowerCase();\n                cCurrentPath = cCurrentPath.toLowerCase();\n            }\n            const { hasMatch, data, params } = testRoute(\n                cRoute,\n                cCurrentPath,\n                originalData\n            );\n            if (hasMatch && (!ob.hash || (ob.hash && isHash))) {\n                ob.handler({\n                    ...routeConfig,\n                    data,\n                    params,\n                    query: getQueryParams()\n                });\n            }\n        }\n    });\n}\n\n/**\n * Internal method to trigger a routing event\n * @private\n */\nexport function trigger(...args) {\n    return execListeners.apply(this, args);\n}\n\n/**\n * Initializes router events\n * @private\n */\nexport function initRouterEvents() {\n    window.addEventListener(`${POP_STATE}`, function (e) {\n        const completePath = `${location.pathname}${location.hash}`;\n        const [pathname, hashstring] = completePath.split('#');\n        let originalData = {};\n        if (e.state) {\n            const { data } = e.state;\n            if (data) {\n                originalData = data;\n            }\n        }\n        triggerRoute({\n            originalEvent: e,\n            route: pathname,\n            type: e.type,\n            hash: false,\n            originalData\n        });\n        if (hashstring) {\n            triggerRoute({\n                originalEvent: e,\n                route: `#${hashstring}`,\n                type: HASH_CHANGE,\n                hash: true,\n                originalData\n            });\n        }\n    });\n}","import { execRoute, bindRoute, unbindRoute, initRouterEvents, trigger } from './utils/helpers';\nimport { extractParams, hasParams } from './utils/params';\nimport { CASE_INSENSITIVE_FLAG } from './utils/constants';\nimport { toQueryString } from './utils/query';\n\n/**\n * @namespace router\n * @public\n * @type {object}\n */\nconst router = {\n    /**\n     * @namespace api\n     * @memberof router\n     * @type {object}\n     */\n    api: {\n        /**\n         * Triggers a custom route event\n         * @method trigger\n         * @public\n         * @memberof router.api\n         * @param {...*} arguments\n         */\n        trigger(...args) {\n            return trigger.apply(this, args);\n        },\n        /**\n         * Checks if a route has parameters\n         * @method hasParams\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        hasParams(...args) {\n            return hasParams.apply(this, args);\n        },\n        /**\n         * Extract parameters as an object if route has parameters\n         * @method extractParams\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        extractParams(...args) {\n            return extractParams.apply(this, args);\n        },\n        /**\n         * Converts object to query string\n         * @method toQueryString\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        toQueryString(...args) {\n            return toQueryString.apply(this, args);\n        }\n    },\n    /**\n     * Sets a route url\n     * @public\n     * @param {string|object} route Route object or URL\n     * @param {boolean} replaceMode Flag to enable replace mode\n     * @param {boolean} noTrigger Flag to disable handler while changing route\n     */\n    set(...args) {\n        return execRoute.apply(this, args);\n    }\n}\n\n/**\n * Attaches a route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction route(...args) {\n    return bindRoute.apply(this, args);\n}\n\n/**\n * Attaches case insensitive route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction routeIgnoreCase(firstArg, ...args) {\n    if (typeof firstArg === 'string') {\n        route.apply(this, [`${CASE_INSENSITIVE_FLAG}${firstArg}`, ...args]);\n    }\n}\n\n/**\n * Detaches a route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction unroute(...args) {\n    return unbindRoute.apply(this, args);\n}\n\ninitRouterEvents();\n\nexport { router, route, routeIgnoreCase, unroute };"],"names":["HASH_CHANGE","POP_STATE","ROUTE_CHANGED","REG_ROUTE_PARAMS","REG_PATHNAME","REG_HASH_QUERY","REG_TRIM_SPECIALCHARS","INVALID_ROUTE","CASE_INSENSITIVE_FLAG","store","LZStorage","compression","libs","getDataFromStore","path","isHash","paths","get","setDataToStore","data","Object","keys","length","set","handlers","hasParams","expr","test","extractParams","window","location","pathname","pathRegex","RegExp","replace","params","lastIndex","match","map","key","values","shift","forEach","index","buildQueryString","queryStringParts","obj","obKey","indexOf","push","toQueryString","join","triggerRoute","originalEvent","route","type","hash","originalData","trigger","isValidRoute","resolveQuery","queryString","append","charAt","substring","trim","search","getQueryParams","coerce","qsObject","deparam","hashStringParams","execRoute","replaceMode","noTrigger","routeObject","sroute","rm","nt","qs","title","appendQuery","split","pureRoute","routeMethod","completeRoute","history","Error","bindGenericRoute","handler","filter","ob","prevHandler","bindRoute","args","e","compareRoute","apply","isCaseInsensitive","Array","isArray","startIndex","exists","eventName","currentPath","cRoute","cCurrentPath","toLowerCase","pathIndex","testRoute","hasMatch","query","unbindRoute","prevLength","isRouteList","url","execListeners","routeConfig","initRouterEvents","addEventListener","completePath","hashstring","state","router","api","routeIgnoreCase","firstArg","unroute"],"mappings":"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"}