{"version":3,"file":"silkrouter.js","sources":["../../src/js/utils/constants.js","../../src/js/utils/libs.js","../../src/js/utils/params.js","../../src/js/utils/helpers.js","../../src/js/silkrouter.js"],"sourcesContent":["/**\n * Router constants\n */\nexport const HASH_CHANGE = 'hashchange';\nexport const POP_STATE = 'popstate';\nexport const ROUTE_CHANGED = 'route.changed';\nexport const REG_ROUTE_PARAMS = /:[^\\/]+/g;\nexport const REG_PATHNAME = /^\\/(?=[^?]*)/;\nexport const REG_HASH_QUERY = /\\?.+/;\nexport const REG_TRIM_SPECIALCHARS = /^([^a-zA-Z0-9]+)|([^a-zA-Z0-9]+)$/g;\nexport const INVALID_ROUTE = 'Route string is not a pure route';","import LZStorage from 'lzstorage';\n\nconst store = new LZStorage({\n    compression: true\n});\n\n/**\n * Store library\n * @namespace libs\n * @type {object}\n * @private\n */\nexport const libs = {\n    /**\n     * Get's decompressed data from store\n     * @private\n     * @method getDataFromStore\n     * @memberof libs\n     * @param {string} path URL path\n     * @param {boolean} isHash Flag to determine if it's a pathname or hash\n     * @returns {*}\n     */\n    getDataFromStore(path, isHash) {\n        const paths = store.get('routeStore') || {};\n        return paths[`${isHash ? '#' : ''}${path}`];\n    },\n    /**\n     * @private\n     * @method setDataToStore\n     * @memberof libs\n     * @param {string} path URL path\n     * @param {boolean} isHash Flag to determine if it's a pathname or hash\n     * @param {any} data Data\n     * @returns {boolean}\n     */\n    setDataToStore(path, isHash, data) {\n        let paths = store.get('routeStore') || {};\n        if (paths[path]) {\n            if (\n                !data\n                || (\n                    typeof data === 'object'\n                    && Object.keys(data).length === 0\n                )\n            ) {\n                // Don't change existing data\n                return false;\n            }\n        }\n        paths = {\n            ...paths,\n            [`${isHash ? '#' : ''}${path}`]: data\n        };\n        return store.set('routeStore', paths, true);\n    },\n    /**\n     * @namespace handlers\n     * @type {object[]}\n     * @private\n     */\n    handlers: []\n};","import { REG_ROUTE_PARAMS, REG_TRIM_SPECIALCHARS } from './constants';\n\n/**\n * Helper functions to test and extract params\n */\n\n/**\n * Tests if route has parameters\n * @param {string} expr Route expression\n */\nexport const hasParams = (expr) => {\n    return REG_ROUTE_PARAMS.test(expr);\n};\n\n/**\n * Parses current path and returns \n * @param {string} expr Route expression\n * @param {string} path URL path\n */\nexport const extractParams = (expr, path = window.location.pathname) => {\n    if (hasParams(expr)) {\n        const pathRegex = new RegExp(expr.replace(/\\//g, \"\\\\/\").replace(/:[^\\/\\\\]+/g, \"([^\\\\/]+)\"));\n        const params = {};\n        if (pathRegex.test(path)) {\n            REG_ROUTE_PARAMS.lastIndex = 0;\n            const keys = [...expr.match(REG_ROUTE_PARAMS)].map(key => key.replace(REG_TRIM_SPECIALCHARS, ''));\n            const values = [...path.match(pathRegex)];\n            values.shift();\n            keys.forEach((key, index) => {\n                params[key] = values[index];\n            });\n        }\n        return params;\n    }\n    return {};\n}","import deparam from 'deparam.js';\nimport { POP_STATE, HASH_CHANGE, ROUTE_CHANGED, INVALID_ROUTE, REG_HASH_QUERY, REG_PATHNAME } from './constants';\nimport { libs } from './libs';\nimport { extractParams } from './params';\n\n/**\n * Triggers \"route.changed\" event\n * @private\n * @param {object} config Route event configuration\n * @param {object} config.originalEvent Original \"popstate\" event object\n * @param {string} config.route route string\n * @param {string} config.type Type of event\n * @param {boolean} config.hash Flag that determines type of event expected\n * @param {object} config.originalData Original data persisted by history API\n */\nfunction triggerRoute({ originalEvent = {}, route, type, hash = false, originalData = {} }) {\n    trigger(\n        ROUTE_CHANGED,\n        {\n            originalEvent,\n            route,\n            type,\n            hash\n        },\n        originalData\n    );\n}\n\n/**\n * Checks if given route is valid\n * @private\n * @param {string} route Route string\n */\nfunction isValidRoute(route) {\n    if (typeof route === \"string\") {\n        return REG_PATHNAME.test(route);\n    };\n    return false;\n}\n\n/**\n * Adds a query string\n * @private\n * @param {string} route Route string\n * @param {string} qString Query string\n * @param {boolean} appendQString Append query string flag\n */\nfunction resolveQuery(route = '', isHash = false, queryString = '', append = false) {\n    queryString = queryString.charAt(0) === '?' ? queryString.substring(1).trim() : queryString.trim();\n    if (!isHash) {\n        if (append) {\n            if (queryString) {\n                return `${route}${location.search}&${queryString}`;\n            }\n            return `${route}${location.search}`;\n        } else if (queryString) {\n            return `${route}?${queryString}`;\n        }\n        return route;\n    } else if (queryString) {\n        return `${location.pathname}${location.search}#${route}?${queryString}`;\n    }\n    return `${location.pathname}${location.search}#${route}`;\n}\n\n/**\n * Converts current query string into an object\n * @private\n */\nfunction getQueryParams(coerce = false) {\n    const qsObject = deparam(window.location.search, coerce);\n    let hashStringParams = {};\n    if (window.location.hash.match(REG_HASH_QUERY)) {\n        hashStringParams = {\n            ...hashStringParams,\n            ...deparam(window.location.hash.match(REG_HASH_QUERY)[0], coerce)\n        };\n    }\n    return {\n        ...qsObject,\n        ...hashStringParams\n    };\n}\n\n/**\n * Set route for given view\n * @private\n * @param {string|object} oRoute Route string or object\n * @param {boolean} replaceMode Replace mode\n * @param {boolean} noTrigger Do not trigger handler\n */\nexport function execRoute(route = {}, replaceMode = false, noTrigger = false) {\n    let routeObject = typeof route === 'string' ? { route } : {\n        ...route\n    };\n    routeObject = {\n        ...routeObject,\n        replaceMode,\n        noTrigger\n    };\n    const { route: sroute, replaceMode: rm, noTrigger: nt, queryString: qs = '', data, title = null, appendQuery } = routeObject;\n    if (typeof sroute === 'string') {\n        const isHash = sroute.charAt(0) === '#' ? 1 : 0;\n        let [pureRoute, queryString = ''] = sroute.trim().split('?');\n        const routeMethod = `${rm ? 'replace' : 'push'}State`;\n        queryString = queryString || qs;\n        pureRoute = pureRoute.substring(isHash);\n        if (isValidRoute(pureRoute)) {\n            libs.setDataToStore(pureRoute, isHash === 1, data);\n            const completeRoute = resolveQuery(pureRoute, isHash === 1, queryString, appendQuery);\n            history[routeMethod]({ data }, title, completeRoute);\n            if (!nt) {\n                triggerRoute(\n                    {\n                        route: `${isHash ? '#' : ''}${pureRoute}`,\n                        type: (isHash ? HASH_CHANGE : POP_STATE),\n                        hash: (isHash === 1)\n                    }\n                );\n            }\n        } else {\n            throw new Error(INVALID_ROUTE);\n        }\n    }\n}\n\n/**\n * Binds generic route if route is passed as a list of URLs\n * @param {string[]} route Array of routes\n * @param {*} handler Handler function\n */\nfunction bindGenericRoute(route, handler) {\n    if (libs.handlers.filter(ob => (ob.prevHandler === handler)).length) {\n        return;\n    }\n    bindRoute((...args) => {\n        if (typeof handler === 'function') {\n            const [e] = args;\n            let compareRoute = e.route;\n            if (compareRoute.charAt(0) === '#') {\n                compareRoute = compareRoute.substring(1);\n            }\n            if (route.indexOf(compareRoute) > -1) {\n                handler.apply(this, args);\n            } else if (\n                route.indexOf(`#${compareRoute}`) > -1\n                && e.hash\n            ) {\n                handler.apply(this, args);\n            }\n        }\n    }, handler);\n}\n\n/**\n * Attaches a route handler function\n * @private\n * @param {string} route Route string\n * @param {function} handler Callback function\n */\nexport function bindRoute(route, handler, prevHandler) {\n    // Resolve generic route\n    if (typeof route === 'function') {\n        prevHandler = handler;\n        handler = route;\n        route = '*';\n    }\n    if (Array.isArray(route)) {\n        bindGenericRoute(route, handler);\n        return;\n    }\n    const startIndex = route.charAt(0) === '#' ? 1 : 0;\n    route = route.substring(startIndex);\n    // Check existence\n    const exists = libs.handlers.filter(ob => (ob.handler === handler && ob.route === route)).length;\n    // Attach handler\n    if (!exists && typeof handler === 'function') {\n        libs.handlers.push({\n            eventName: ROUTE_CHANGED,\n            handler,\n            prevHandler,\n            route,\n            hash: startIndex === 1\n        });\n    }\n    // Execute handler if matches current route (Replaces init method in version 2.0)\n    const { pathname, hash } = window.location;\n    const paths = startIndex === 1 ? [hash] : [pathname, hash];\n    paths.filter(path => path.trim()).forEach(currentPath => {\n        const pathIndex = currentPath.charAt(0) === '#' ? 1 : 0;\n        const { hasMatch, data, params } = testRoute(route, currentPath);\n        if (hasMatch && typeof handler === 'function') {\n            handler({\n                route: currentPath,\n                hash: pathIndex === 1,\n                eventName: pathIndex === 1 ? HASH_CHANGE : POP_STATE,\n                data,\n                params,\n                query: getQueryParams()\n            });\n        }\n    });\n}\n\n/**\n * Unbinds route handlers\n * @private\n * @param {string} route Route string\n * @param {function} handler Callback function\n */\nexport function unbindRoute(route, handler) {\n    const args = arguments;\n    let isRouteList = false;\n    if (args.length === 0) {\n        libs.handlers.length = 0;\n    }\n    if (Array.isArray(route)) {\n        route = '*';\n        isRouteList = true;\n    }\n    libs.handlers = libs.handlers.filter(ob => {\n        if (args.length === 1 && typeof args[0] === 'string' && !isRouteList) {\n            return ob.route !== route;\n        }\n        // Check for generic route\n        if (args.length === 1 && typeof args[0] === 'function') {\n            handler = args[0];\n            route = '*'; // Generic route\n        }\n        return !(ob.route === route && (\n            ob.handler === handler\n            || ob.prevHandler === handler\n        ));\n    });\n}\n\n\n/**\n * Compares route with current URL\n * @private\n * @param {string} route Route string\n * @param {string} url Current url\n * @param {object} params Parameters\n */\nfunction testRoute(route, url, originalData = {}) {\n    const isHash = url.charAt(0) === '#';\n    if (isHash) {\n        url = url.substring(1);\n    }\n    const [path] = url.split('?');\n    if (!!Object.keys(originalData).length) {\n        libs.setDataToStore(path, isHash, originalData); // Sync store with event data.\n    }\n    const data = libs.getDataFromStore(path, isHash);\n    const params = extractParams(route, url);\n    let hasMatch = Object.keys(params).length > 0 || (\n        isValidRoute(url) && ((route === url) || (route === '*'))\n    );\n    return {\n        hasMatch,\n        data,\n        params\n    };\n}\n\n/**\n * Triggers a router event\n * @private\n * @param {string} eventName Name of route event\n * @param {object} params Parameters\n */\nfunction execListeners(eventName, routeConfig, originalData = {}) {\n    const { hash: isHash } = routeConfig;\n    const { hash, pathname } = window.location;\n    libs.handlers.forEach(ob => {\n        if (ob.eventName === eventName) {\n            const { hasMatch, data, params } = testRoute(\n                ob.route,\n                (isHash ? hash : pathname),\n                originalData\n            );\n            if (hasMatch && (!ob.hash || (ob.hash && isHash))) {\n                ob.handler({\n                    ...routeConfig,\n                    data,\n                    params,\n                    query: getQueryParams()\n                });\n            }\n        }\n    });\n}\n\n/**\n * Internal method to trigger a routing event\n * @private\n */\nexport function trigger() {\n    return execListeners.apply(this, arguments);\n}\n\n/**\n * Initializes router events\n * @private\n */\nexport function initRouterEvents() {\n    window.addEventListener(`${POP_STATE}`, function (e) {\n        const completePath = `${location.pathname}${location.hash}`;\n        const [pathname, hashstring] = completePath.split('#');\n        let originalData = {};\n        if (e.state) {\n            const { data } = e.state;\n            if (data) {\n                originalData = data;\n            }\n        }\n        triggerRoute({\n            originalEvent: e,\n            route: pathname,\n            type: e.type,\n            hash: false,\n            originalData\n        });\n        if (hashstring) {\n            triggerRoute({\n                originalEvent: e,\n                route: `#${hashstring}`,\n                type: HASH_CHANGE,\n                hash: true,\n                originalData\n            });\n        }\n    });\n}","import { execRoute, bindRoute, unbindRoute, initRouterEvents, trigger } from './utils/helpers';\nimport { extractParams, hasParams } from './utils/params';\n\n/**\n * @namespace router\n * @public\n * @type {object}\n */\nconst router = {\n    /**\n     * @namespace api\n     * @memberof router\n     * @type {object}\n     */\n    api: {\n        /**\n         * Triggers a custom route event\n         * @method trigger\n         * @public\n         * @memberof router.api\n         * @param {...*} arguments\n         */\n        trigger() {\n            return trigger.apply(this, arguments);\n        },\n        /**\n         * Checks if a route has parameters\n         * @method hasParams\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        hasParams() {\n            return hasParams.apply(this, arguments);\n        },\n        /**\n         * Extract parameters as an object if route has parameters\n         * @method extractParams\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        extractParams() {\n            return extractParams.apply(this, arguments);\n        }\n    },\n    /**\n     * Sets a route url\n     * @public\n     * @param {string|object} route Route object or URL\n     * @param {boolean} replaceMode Flag to enable replace mode\n     * @param {boolean} noTrigger Flag to disable handler while changing route\n     */\n    set() {\n        return execRoute.apply(this, arguments);\n    }\n}\n\n/**\n * Attaches a route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction route() {\n    return bindRoute.apply(this, arguments);\n}\n\n/**\n * Detaches a route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction unroute() {\n    return unbindRoute.apply(this, arguments);\n}\n\ninitRouterEvents();\n\nexport { router, route, unroute };"],"names":["HASH_CHANGE","POP_STATE","ROUTE_CHANGED","REG_ROUTE_PARAMS","REG_PATHNAME","REG_HASH_QUERY","REG_TRIM_SPECIALCHARS","INVALID_ROUTE","store","LZStorage","compression","libs","getDataFromStore","path","isHash","paths","get","setDataToStore","data","Object","keys","length","set","handlers","hasParams","expr","test","extractParams","window","location","pathname","pathRegex","RegExp","replace","params","lastIndex","match","map","key","values","shift","forEach","index","triggerRoute","originalEvent","route","type","hash","originalData","trigger","isValidRoute","resolveQuery","queryString","append","charAt","substring","trim","search","getQueryParams","coerce","qsObject","deparam","hashStringParams","execRoute","replaceMode","noTrigger","routeObject","sroute","rm","nt","qs","title","appendQuery","split","pureRoute","routeMethod","completeRoute","history","Error","bindGenericRoute","handler","filter","ob","prevHandler","bindRoute","args","e","compareRoute","indexOf","apply","Array","isArray","startIndex","exists","push","eventName","currentPath","pathIndex","testRoute","hasMatch","query","unbindRoute","arguments","isRouteList","url","execListeners","routeConfig","initRouterEvents","addEventListener","completePath","hashstring","state","router","api","unroute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;AAGA,EAAO,IAAMA,WAAW,GAAG,YAApB;AACP,EAAO,IAAMC,SAAS,GAAG,UAAlB;AACP,EAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,EAAO,IAAMC,gBAAgB,GAAG,UAAzB;AACP,EAAO,IAAMC,YAAY,GAAG,cAArB;AACP,EAAO,IAAMC,cAAc,GAAG,MAAvB;AACP,EAAO,IAAMC,qBAAqB,GAAG,oCAA9B;AACP,EAAO,IAAMC,aAAa,GAAG,kCAAtB;;ECRP,IAAMC,KAAK,GAAG,IAAIC,SAAJ,CAAc;EACxBC,EAAAA,WAAW,EAAE;EADW,CAAd,CAAd;EAIA;;;;;;;AAMA,EAAO,IAAMC,IAAI,GAAG;EAChB;;;;;;;;;EASAC,EAAAA,gBAVgB,4BAUCC,IAVD,EAUOC,MAVP,EAUe;EAC3B,QAAMC,KAAK,GAAGP,KAAK,CAACQ,GAAN,CAAU,YAAV,KAA2B,EAAzC;EACA,WAAOD,KAAK,WAAID,MAAM,GAAG,GAAH,GAAS,EAAnB,SAAwBD,IAAxB,EAAZ;EACH,GAbe;;EAchB;;;;;;;;;EASAI,EAAAA,cAvBgB,0BAuBDJ,IAvBC,EAuBKC,MAvBL,EAuBaI,IAvBb,EAuBmB;EAC/B,QAAIH,KAAK,GAAGP,KAAK,CAACQ,GAAN,CAAU,YAAV,KAA2B,EAAvC;;EACA,QAAID,KAAK,CAACF,IAAD,CAAT,EAAiB;EACb,UACI,CAACK,IAAD,IAEI,QAAOA,IAAP,MAAgB,QAAhB,IACGC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,KAA6B,CAJxC,EAME;EACE;EACA,eAAO,KAAP;EACH;EACJ;;EACDN,IAAAA,KAAK,qBACEA,KADF,gCAEGD,MAAM,GAAG,GAAH,GAAS,EAFlB,SAEuBD,IAFvB,GAEgCK,IAFhC,EAAL;EAIA,WAAOV,KAAK,CAACc,GAAN,CAAU,YAAV,EAAwBP,KAAxB,EAA+B,IAA/B,CAAP;EACH,GA1Ce;;EA2ChB;;;;;EAKAQ,EAAAA,QAAQ,EAAE;EAhDM,CAAb;;ECVP;;;;EAIA;;;;;AAIA,EAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;EAC/B,SAAOtB,gBAAgB,CAACuB,IAAjB,CAAsBD,IAAtB,CAAP;EACH,CAFM;EAIP;;;;;;AAKA,EAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACF,IAAD,EAA2C;EAAA,MAApCZ,IAAoC,uEAA7Be,MAAM,CAACC,QAAP,CAAgBC,QAAa;;EACpE,MAAIN,SAAS,CAACC,IAAD,CAAb,EAAqB;EACjB,QAAMM,SAAS,GAAG,IAAIC,MAAJ,CAAWP,IAAI,CAACQ,OAAL,CAAa,KAAb,EAAoB,KAApB,EAA2BA,OAA3B,CAAmC,YAAnC,EAAiD,WAAjD,CAAX,CAAlB;EACA,QAAMC,MAAM,GAAG,EAAf;;EACA,QAAIH,SAAS,CAACL,IAAV,CAAeb,IAAf,CAAJ,EAA0B;EACtBV,MAAAA,gBAAgB,CAACgC,SAAjB,GAA6B,CAA7B;;EACA,UAAMf,IAAI,GAAG,mBAAIK,IAAI,CAACW,KAAL,CAAWjC,gBAAX,CAAJ,EAAkCkC,GAAlC,CAAsC,UAAAC,GAAG;EAAA,eAAIA,GAAG,CAACL,OAAJ,CAAY3B,qBAAZ,EAAmC,EAAnC,CAAJ;EAAA,OAAzC,CAAb;;EACA,UAAMiC,MAAM,sBAAO1B,IAAI,CAACuB,KAAL,CAAWL,SAAX,CAAP,CAAZ;;EACAQ,MAAAA,MAAM,CAACC,KAAP;EACApB,MAAAA,IAAI,CAACqB,OAAL,CAAa,UAACH,GAAD,EAAMI,KAAN,EAAgB;EACzBR,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAcC,MAAM,CAACG,KAAD,CAApB;EACH,OAFD;EAGH;;EACD,WAAOR,MAAP;EACH;;EACD,SAAO,EAAP;EACH,CAhBM;;ECdP;;;;;;;;;;;EAUA,SAASS,YAAT,OAA4F;EAAA,gCAApEC,aAAoE;EAAA,MAApEA,aAAoE,mCAApD,EAAoD;EAAA,MAAhDC,KAAgD,QAAhDA,KAAgD;EAAA,MAAzCC,IAAyC,QAAzCA,IAAyC;EAAA,uBAAnCC,IAAmC;EAAA,MAAnCA,IAAmC,0BAA5B,KAA4B;EAAA,+BAArBC,YAAqB;EAAA,MAArBA,YAAqB,kCAAN,EAAM;EACxFC,EAAAA,OAAO,CACH/C,aADG,EAEH;EACI0C,IAAAA,aAAa,EAAbA,aADJ;EAEIC,IAAAA,KAAK,EAALA,KAFJ;EAGIC,IAAAA,IAAI,EAAJA,IAHJ;EAIIC,IAAAA,IAAI,EAAJA;EAJJ,GAFG,EAQHC,YARG,CAAP;EAUH;EAED;;;;;;;EAKA,SAASE,YAAT,CAAsBL,KAAtB,EAA6B;EACzB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;EAC3B,WAAOzC,YAAY,CAACsB,IAAb,CAAkBmB,KAAlB,CAAP;EACH;EACD,SAAO,KAAP;EACH;EAED;;;;;;;;;EAOA,SAASM,YAAT,GAAoF;EAAA,MAA9DN,KAA8D,uEAAtD,EAAsD;EAAA,MAAlD/B,MAAkD,uEAAzC,KAAyC;EAAA,MAAlCsC,WAAkC,uEAApB,EAAoB;EAAA,MAAhBC,MAAgB,uEAAP,KAAO;EAChFD,EAAAA,WAAW,GAAGA,WAAW,CAACE,MAAZ,CAAmB,CAAnB,MAA0B,GAA1B,GAAgCF,WAAW,CAACG,SAAZ,CAAsB,CAAtB,EAAyBC,IAAzB,EAAhC,GAAkEJ,WAAW,CAACI,IAAZ,EAAhF;;EACA,MAAI,CAAC1C,MAAL,EAAa;EACT,QAAIuC,MAAJ,EAAY;EACR,UAAID,WAAJ,EAAiB;EACb,yBAAUP,KAAV,SAAkBhB,QAAQ,CAAC4B,MAA3B,cAAqCL,WAArC;EACH;;EACD,uBAAUP,KAAV,SAAkBhB,QAAQ,CAAC4B,MAA3B;EACH,KALD,MAKO,IAAIL,WAAJ,EAAiB;EACpB,uBAAUP,KAAV,cAAmBO,WAAnB;EACH;;EACD,WAAOP,KAAP;EACH,GAVD,MAUO,IAAIO,WAAJ,EAAiB;EACpB,qBAAUvB,QAAQ,CAACC,QAAnB,SAA8BD,QAAQ,CAAC4B,MAAvC,cAAiDZ,KAAjD,cAA0DO,WAA1D;EACH;;EACD,mBAAUvB,QAAQ,CAACC,QAAnB,SAA8BD,QAAQ,CAAC4B,MAAvC,cAAiDZ,KAAjD;EACH;EAED;;;;;;EAIA,SAASa,cAAT,GAAwC;EAAA,MAAhBC,MAAgB,uEAAP,KAAO;EACpC,MAAMC,QAAQ,GAAGC,OAAO,CAACjC,MAAM,CAACC,QAAP,CAAgB4B,MAAjB,EAAyBE,MAAzB,CAAxB;EACA,MAAIG,gBAAgB,GAAG,EAAvB;;EACA,MAAIlC,MAAM,CAACC,QAAP,CAAgBkB,IAAhB,CAAqBX,KAArB,CAA2B/B,cAA3B,CAAJ,EAAgD;EAC5CyD,IAAAA,gBAAgB,qBACTA,gBADS,EAETD,OAAO,CAACjC,MAAM,CAACC,QAAP,CAAgBkB,IAAhB,CAAqBX,KAArB,CAA2B/B,cAA3B,EAA2C,CAA3C,CAAD,EAAgDsD,MAAhD,CAFE,CAAhB;EAIH;;EACD,2BACOC,QADP,EAEOE,gBAFP;EAIH;EAED;;;;;;;;;AAOA,EAAO,SAASC,SAAT,GAAuE;EAAA,MAApDlB,KAAoD,uEAA5C,EAA4C;EAAA,MAAxCmB,WAAwC,uEAA1B,KAA0B;EAAA,MAAnBC,SAAmB,uEAAP,KAAO;EAC1E,MAAIC,WAAW,GAAG,OAAOrB,KAAP,KAAiB,QAAjB,GAA4B;EAAEA,IAAAA,KAAK,EAALA;EAAF,GAA5B,qBACXA,KADW,CAAlB;EAGAqB,EAAAA,WAAW,qBACJA,WADI;EAEPF,IAAAA,WAAW,EAAXA,WAFO;EAGPC,IAAAA,SAAS,EAATA;EAHO,IAAX;EAJ0E,qBASuCC,WATvC;EAAA,MAS3DC,MAT2D,gBASlEtB,KATkE;EAAA,MAStCuB,EATsC,gBASnDJ,WATmD;EAAA,MASvBK,EATuB,gBASlCJ,SATkC;EAAA,2CASnBb,WATmB;EAAA,MASNkB,EATM,sCASD,EATC;EAAA,MASGpD,IATH,gBASGA,IATH;EAAA,wCASSqD,KATT;EAAA,MASSA,KATT,mCASiB,IATjB;EAAA,MASuBC,WATvB,gBASuBA,WATvB;;EAU1E,MAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;EAC5B,QAAMrD,MAAM,GAAGqD,MAAM,CAACb,MAAP,CAAc,CAAd,MAAqB,GAArB,GAA2B,CAA3B,GAA+B,CAA9C;;EAD4B,6BAEQa,MAAM,CAACX,IAAP,GAAciB,KAAd,CAAoB,GAApB,CAFR;EAAA;EAAA,QAEvBC,SAFuB;EAAA;EAAA,QAEZtB,WAFY,qCAEE,EAFF;;EAG5B,QAAMuB,WAAW,aAAMP,EAAE,GAAG,SAAH,GAAe,MAAvB,UAAjB;EACAhB,IAAAA,WAAW,GAAGA,WAAW,IAAIkB,EAA7B;EACAI,IAAAA,SAAS,GAAGA,SAAS,CAACnB,SAAV,CAAoBzC,MAApB,CAAZ;;EACA,QAAIoC,YAAY,CAACwB,SAAD,CAAhB,EAA6B;EACzB/D,MAAAA,IAAI,CAACM,cAAL,CAAoByD,SAApB,EAA+B5D,MAAM,KAAK,CAA1C,EAA6CI,IAA7C;EACA,UAAM0D,aAAa,GAAGzB,YAAY,CAACuB,SAAD,EAAY5D,MAAM,KAAK,CAAvB,EAA0BsC,WAA1B,EAAuCoB,WAAvC,CAAlC;EACAK,MAAAA,OAAO,CAACF,WAAD,CAAP,CAAqB;EAAEzD,QAAAA,IAAI,EAAJA;EAAF,OAArB,EAA+BqD,KAA/B,EAAsCK,aAAtC;;EACA,UAAI,CAACP,EAAL,EAAS;EACL1B,QAAAA,YAAY,CACR;EACIE,UAAAA,KAAK,YAAK/B,MAAM,GAAG,GAAH,GAAS,EAApB,SAAyB4D,SAAzB,CADT;EAEI5B,UAAAA,IAAI,EAAGhC,MAAM,GAAGd,WAAH,GAAiBC,SAFlC;EAGI8C,UAAAA,IAAI,EAAGjC,MAAM,KAAK;EAHtB,SADQ,CAAZ;EAOH;EACJ,KAbD,MAaO;EACH,YAAM,IAAIgE,KAAJ,CAAUvE,aAAV,CAAN;EACH;EACJ;EACJ;EAED;;;;;;EAKA,SAASwE,gBAAT,CAA0BlC,KAA1B,EAAiCmC,OAAjC,EAA0C;EAAA;;EACtC,MAAIrE,IAAI,CAACY,QAAL,CAAc0D,MAAd,CAAqB,UAAAC,EAAE;EAAA,WAAKA,EAAE,CAACC,WAAH,KAAmBH,OAAxB;EAAA,GAAvB,EAAyD3D,MAA7D,EAAqE;EACjE;EACH;;EACD+D,EAAAA,SAAS,CAAC,YAAa;EACnB,QAAI,OAAOJ,OAAP,KAAmB,UAAvB,EAAmC;EAAA,wCADzBK,IACyB;EADzBA,QAAAA,IACyB;EAAA;;EAAA,UACxBC,CADwB,GACnBD,IADmB;EAE/B,UAAIE,YAAY,GAAGD,CAAC,CAACzC,KAArB;;EACA,UAAI0C,YAAY,CAACjC,MAAb,CAAoB,CAApB,MAA2B,GAA/B,EAAoC;EAChCiC,QAAAA,YAAY,GAAGA,YAAY,CAAChC,SAAb,CAAuB,CAAvB,CAAf;EACH;;EACD,UAAIV,KAAK,CAAC2C,OAAN,CAAcD,YAAd,IAA8B,CAAC,CAAnC,EAAsC;EAClCP,QAAAA,OAAO,CAACS,KAAR,CAAc,KAAd,EAAoBJ,IAApB;EACH,OAFD,MAEO,IACHxC,KAAK,CAAC2C,OAAN,YAAkBD,YAAlB,KAAoC,CAAC,CAArC,IACGD,CAAC,CAACvC,IAFF,EAGL;EACEiC,QAAAA,OAAO,CAACS,KAAR,CAAc,KAAd,EAAoBJ,IAApB;EACH;EACJ;EACJ,GAhBQ,EAgBNL,OAhBM,CAAT;EAiBH;EAED;;;;;;;;AAMA,EAAO,SAASI,SAAT,CAAmBvC,KAAnB,EAA0BmC,OAA1B,EAAmCG,WAAnC,EAAgD;EACnD;EACA,MAAI,OAAOtC,KAAP,KAAiB,UAArB,EAAiC;EAC7BsC,IAAAA,WAAW,GAAGH,OAAd;EACAA,IAAAA,OAAO,GAAGnC,KAAV;EACAA,IAAAA,KAAK,GAAG,GAAR;EACH;;EACD,MAAI6C,KAAK,CAACC,OAAN,CAAc9C,KAAd,CAAJ,EAA0B;EACtBkC,IAAAA,gBAAgB,CAAClC,KAAD,EAAQmC,OAAR,CAAhB;EACA;EACH;;EACD,MAAMY,UAAU,GAAG/C,KAAK,CAACS,MAAN,CAAa,CAAb,MAAoB,GAApB,GAA0B,CAA1B,GAA8B,CAAjD;EACAT,EAAAA,KAAK,GAAGA,KAAK,CAACU,SAAN,CAAgBqC,UAAhB,CAAR,CAZmD;;EAcnD,MAAMC,MAAM,GAAGlF,IAAI,CAACY,QAAL,CAAc0D,MAAd,CAAqB,UAAAC,EAAE;EAAA,WAAKA,EAAE,CAACF,OAAH,KAAeA,OAAf,IAA0BE,EAAE,CAACrC,KAAH,KAAaA,KAA5C;EAAA,GAAvB,EAA2ExB,MAA1F,CAdmD;;EAgBnD,MAAI,CAACwE,MAAD,IAAW,OAAOb,OAAP,KAAmB,UAAlC,EAA8C;EAC1CrE,IAAAA,IAAI,CAACY,QAAL,CAAcuE,IAAd,CAAmB;EACfC,MAAAA,SAAS,EAAE7F,aADI;EAEf8E,MAAAA,OAAO,EAAPA,OAFe;EAGfG,MAAAA,WAAW,EAAXA,WAHe;EAIftC,MAAAA,KAAK,EAALA,KAJe;EAKfE,MAAAA,IAAI,EAAE6C,UAAU,KAAK;EALN,KAAnB;EAOH,GAxBkD;;;EAAA,yBA0BxBhE,MAAM,CAACC,QA1BiB;EAAA,MA0B3CC,QA1B2C,oBA0B3CA,QA1B2C;EAAA,MA0BjCiB,IA1BiC,oBA0BjCA,IA1BiC;EA2BnD,MAAMhC,KAAK,GAAG6E,UAAU,KAAK,CAAf,GAAmB,CAAC7C,IAAD,CAAnB,GAA4B,CAACjB,QAAD,EAAWiB,IAAX,CAA1C;EACAhC,EAAAA,KAAK,CAACkE,MAAN,CAAa,UAAApE,IAAI;EAAA,WAAIA,IAAI,CAAC2C,IAAL,EAAJ;EAAA,GAAjB,EAAkCf,OAAlC,CAA0C,UAAAuD,WAAW,EAAI;EACrD,QAAMC,SAAS,GAAGD,WAAW,CAAC1C,MAAZ,CAAmB,CAAnB,MAA0B,GAA1B,GAAgC,CAAhC,GAAoC,CAAtD;;EADqD,qBAElB4C,SAAS,CAACrD,KAAD,EAAQmD,WAAR,CAFS;EAAA,QAE7CG,QAF6C,cAE7CA,QAF6C;EAAA,QAEnCjF,IAFmC,cAEnCA,IAFmC;EAAA,QAE7BgB,MAF6B,cAE7BA,MAF6B;;EAGrD,QAAIiE,QAAQ,IAAI,OAAOnB,OAAP,KAAmB,UAAnC,EAA+C;EAC3CA,MAAAA,OAAO,CAAC;EACJnC,QAAAA,KAAK,EAAEmD,WADH;EAEJjD,QAAAA,IAAI,EAAEkD,SAAS,KAAK,CAFhB;EAGJF,QAAAA,SAAS,EAAEE,SAAS,KAAK,CAAd,GAAkBjG,WAAlB,GAAgCC,SAHvC;EAIJiB,QAAAA,IAAI,EAAJA,IAJI;EAKJgB,QAAAA,MAAM,EAANA,MALI;EAMJkE,QAAAA,KAAK,EAAE1C,cAAc;EANjB,OAAD,CAAP;EAQH;EACJ,GAbD;EAcH;EAED;;;;;;;AAMA,EAAO,SAAS2C,WAAT,CAAqBxD,KAArB,EAA4BmC,OAA5B,EAAqC;EACxC,MAAMK,IAAI,GAAGiB,SAAb;EACA,MAAIC,WAAW,GAAG,KAAlB;;EACA,MAAIlB,IAAI,CAAChE,MAAL,KAAgB,CAApB,EAAuB;EACnBV,IAAAA,IAAI,CAACY,QAAL,CAAcF,MAAd,GAAuB,CAAvB;EACH;;EACD,MAAIqE,KAAK,CAACC,OAAN,CAAc9C,KAAd,CAAJ,EAA0B;EACtBA,IAAAA,KAAK,GAAG,GAAR;EACA0D,IAAAA,WAAW,GAAG,IAAd;EACH;;EACD5F,EAAAA,IAAI,CAACY,QAAL,GAAgBZ,IAAI,CAACY,QAAL,CAAc0D,MAAd,CAAqB,UAAAC,EAAE,EAAI;EACvC,QAAIG,IAAI,CAAChE,MAAL,KAAgB,CAAhB,IAAqB,OAAOgE,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAxC,IAAoD,CAACkB,WAAzD,EAAsE;EAClE,aAAOrB,EAAE,CAACrC,KAAH,KAAaA,KAApB;EACH,KAHsC;;;EAKvC,QAAIwC,IAAI,CAAChE,MAAL,KAAgB,CAAhB,IAAqB,OAAOgE,IAAI,CAAC,CAAD,CAAX,KAAmB,UAA5C,EAAwD;EACpDL,MAAAA,OAAO,GAAGK,IAAI,CAAC,CAAD,CAAd;EACAxC,MAAAA,KAAK,GAAG,GAAR,CAFoD;EAGvD;;EACD,WAAO,EAAEqC,EAAE,CAACrC,KAAH,KAAaA,KAAb,KACLqC,EAAE,CAACF,OAAH,KAAeA,OAAf,IACGE,EAAE,CAACC,WAAH,KAAmBH,OAFjB,CAAF,CAAP;EAIH,GAbe,CAAhB;EAcH;EAGD;;;;;;;;EAOA,SAASkB,SAAT,CAAmBrD,KAAnB,EAA0B2D,GAA1B,EAAkD;EAAA,MAAnBxD,YAAmB,uEAAJ,EAAI;EAC9C,MAAMlC,MAAM,GAAG0F,GAAG,CAAClD,MAAJ,CAAW,CAAX,MAAkB,GAAjC;;EACA,MAAIxC,MAAJ,EAAY;EACR0F,IAAAA,GAAG,GAAGA,GAAG,CAACjD,SAAJ,CAAc,CAAd,CAAN;EACH;;EAJ6C,mBAK/BiD,GAAG,CAAC/B,KAAJ,CAAU,GAAV,CAL+B;EAAA;EAAA,MAKvC5D,IALuC;;EAM9C,MAAI,CAAC,CAACM,MAAM,CAACC,IAAP,CAAY4B,YAAZ,EAA0B3B,MAAhC,EAAwC;EACpCV,IAAAA,IAAI,CAACM,cAAL,CAAoBJ,IAApB,EAA0BC,MAA1B,EAAkCkC,YAAlC,EADoC;EAEvC;;EACD,MAAM9B,IAAI,GAAGP,IAAI,CAACC,gBAAL,CAAsBC,IAAtB,EAA4BC,MAA5B,CAAb;EACA,MAAMoB,MAAM,GAAGP,aAAa,CAACkB,KAAD,EAAQ2D,GAAR,CAA5B;EACA,MAAIL,QAAQ,GAAGhF,MAAM,CAACC,IAAP,CAAYc,MAAZ,EAAoBb,MAApB,GAA6B,CAA7B,IACX6B,YAAY,CAACsD,GAAD,CAAZ,KAAuB3D,KAAK,KAAK2D,GAAX,IAAoB3D,KAAK,KAAK,GAApD,CADJ;EAGA,SAAO;EACHsD,IAAAA,QAAQ,EAARA,QADG;EAEHjF,IAAAA,IAAI,EAAJA,IAFG;EAGHgB,IAAAA,MAAM,EAANA;EAHG,GAAP;EAKH;EAED;;;;;;;;EAMA,SAASuE,aAAT,CAAuBV,SAAvB,EAAkCW,WAAlC,EAAkE;EAAA,MAAnB1D,YAAmB,uEAAJ,EAAI;EAAA,MAChDlC,MADgD,GACrC4F,WADqC,CACtD3D,IADsD;EAAA,0BAEnCnB,MAAM,CAACC,QAF4B;EAAA,MAEtDkB,IAFsD,qBAEtDA,IAFsD;EAAA,MAEhDjB,QAFgD,qBAEhDA,QAFgD;EAG9DnB,EAAAA,IAAI,CAACY,QAAL,CAAckB,OAAd,CAAsB,UAAAyC,EAAE,EAAI;EACxB,QAAIA,EAAE,CAACa,SAAH,KAAiBA,SAArB,EAAgC;EAAA,wBACOG,SAAS,CACxChB,EAAE,CAACrC,KADqC,EAEvC/B,MAAM,GAAGiC,IAAH,GAAUjB,QAFuB,EAGxCkB,YAHwC,CADhB;EAAA,UACpBmD,QADoB,eACpBA,QADoB;EAAA,UACVjF,IADU,eACVA,IADU;EAAA,UACJgB,MADI,eACJA,MADI;;EAM5B,UAAIiE,QAAQ,KAAK,CAACjB,EAAE,CAACnC,IAAJ,IAAamC,EAAE,CAACnC,IAAH,IAAWjC,MAA7B,CAAZ,EAAmD;EAC/CoE,QAAAA,EAAE,CAACF,OAAH,mBACO0B,WADP;EAEIxF,UAAAA,IAAI,EAAJA,IAFJ;EAGIgB,UAAAA,MAAM,EAANA,MAHJ;EAIIkE,UAAAA,KAAK,EAAE1C,cAAc;EAJzB;EAMH;EACJ;EACJ,GAhBD;EAiBH;EAED;;;;;;AAIA,EAAO,SAAST,OAAT,GAAmB;EACtB,SAAOwD,aAAa,CAAChB,KAAd,CAAoB,IAApB,EAA0Ba,SAA1B,CAAP;EACH;EAED;;;;;AAIA,EAAO,SAASK,gBAAT,GAA4B;EAC/B/E,EAAAA,MAAM,CAACgF,gBAAP,WAA2B3G,SAA3B,GAAwC,UAAUqF,CAAV,EAAa;EACjD,QAAMuB,YAAY,aAAMhF,QAAQ,CAACC,QAAf,SAA0BD,QAAQ,CAACkB,IAAnC,CAAlB;;EADiD,8BAElB8D,YAAY,CAACpC,KAAb,CAAmB,GAAnB,CAFkB;EAAA;EAAA,QAE1C3C,QAF0C;EAAA,QAEhCgF,UAFgC;;EAGjD,QAAI9D,YAAY,GAAG,EAAnB;;EACA,QAAIsC,CAAC,CAACyB,KAAN,EAAa;EAAA,UACD7F,IADC,GACQoE,CAAC,CAACyB,KADV,CACD7F,IADC;;EAET,UAAIA,IAAJ,EAAU;EACN8B,QAAAA,YAAY,GAAG9B,IAAf;EACH;EACJ;;EACDyB,IAAAA,YAAY,CAAC;EACTC,MAAAA,aAAa,EAAE0C,CADN;EAETzC,MAAAA,KAAK,EAAEf,QAFE;EAGTgB,MAAAA,IAAI,EAAEwC,CAAC,CAACxC,IAHC;EAITC,MAAAA,IAAI,EAAE,KAJG;EAKTC,MAAAA,YAAY,EAAZA;EALS,KAAD,CAAZ;;EAOA,QAAI8D,UAAJ,EAAgB;EACZnE,MAAAA,YAAY,CAAC;EACTC,QAAAA,aAAa,EAAE0C,CADN;EAETzC,QAAAA,KAAK,aAAMiE,UAAN,CAFI;EAGThE,QAAAA,IAAI,EAAE9C,WAHG;EAIT+C,QAAAA,IAAI,EAAE,IAJG;EAKTC,QAAAA,YAAY,EAAZA;EALS,OAAD,CAAZ;EAOH;EACJ,GA1BD;EA2BH;;EC1UD;;;;;;AAKA,MAAMgE,MAAM,GAAG;EACX;;;;;EAKAC,EAAAA,GAAG,EAAE;EACD;;;;;;;EAOAhE,IAAAA,OARC,uBAQS;EACN,aAAOA,OAAO,CAACwC,KAAR,CAAc,IAAd,EAAoBa,SAApB,CAAP;EACH,KAVA;;EAWD;;;;;;;EAOA9E,IAAAA,SAlBC,yBAkBW;EACR,aAAOA,SAAS,CAACiE,KAAV,CAAgB,IAAhB,EAAsBa,SAAtB,CAAP;EACH,KApBA;;EAqBD;;;;;;;EAOA3E,IAAAA,aA5BC,6BA4Be;EACZ,aAAOA,aAAa,CAAC8D,KAAd,CAAoB,IAApB,EAA0Ba,SAA1B,CAAP;EACH;EA9BA,GANM;;EAsCX;;;;;;;EAOAhF,EAAAA,GA7CW,iBA6CL;EACF,WAAOyC,SAAS,CAAC0B,KAAV,CAAgB,IAAhB,EAAsBa,SAAtB,CAAP;EACH;EA/CU,CAAf;EAkDA;;;;;;;EAMA,SAASzD,KAAT,GAAiB;EACb,SAAOuC,SAAS,CAACK,KAAV,CAAgB,IAAhB,EAAsBa,SAAtB,CAAP;EACH;EAED;;;;;;;;EAMA,SAASY,OAAT,GAAmB;EACf,SAAOb,WAAW,CAACZ,KAAZ,CAAkB,IAAlB,EAAwBa,SAAxB,CAAP;EACH;;EAEDK,gBAAgB;;;;;;;;;;;;;;"}