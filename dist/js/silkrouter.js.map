{"version":3,"file":"silkrouter.js","sources":["../../src/js/utils/constants.js","../../src/js/utils/assign.js","../../src/js/utils/libs.js","../../src/js/utils/params.js","../../src/js/utils/query.js","../../src/js/utils/helpers.js","../../src/js/silkrouter.js"],"sourcesContent":["/**\n * Router constants\n */\nexport const HASH_CHANGE = 'hashchange';\nexport const POP_STATE = 'popstate';\nexport const ROUTE_CHANGED = 'route.changed';\nexport const REG_ROUTE_PARAMS = /:[^\\/]+/g;\nexport const REG_PATHNAME = /^\\/(?=[^?]*)/;\nexport const REG_HASH_QUERY = /\\?.+/;\nexport const REG_TRIM_SPECIALCHARS = /^([^a-zA-Z0-9]+)|([^a-zA-Z0-9]+)$/g;\nexport const INVALID_ROUTE = 'Route string is not a pure route';\nexport const CASE_INSENSITIVE_FLAG = '$$';","/* eslint-disable */\n\n/**\n * Inner loop function for assign\n * @private\n * @param {object} ref Argument object\n * @param {object} target First object\n */\nfunction loopFunc(ref, target) {\n    if (ref != null && typeof ref === 'object') {\n        Object.keys(ref).forEach(function (key) {\n            target[key] = ref[key];\n        });\n    }\n}\n\n/**\n * Polyfill for Object.assign only smaller and with less features\n * @private\n * @returns {object}\n */\nexport function assign() {\n    let i = 0;\n    const target = typeof arguments[0] !== 'object' || arguments[0] == null ? {} : arguments[0];\n    for (i = 1; i < arguments.length; i++) {\n        loopFunc(arguments[i], target);\n    }\n    return target;\n}\n/* eslint-enable */","import LZStorage from 'lzstorage';\nimport { assign } from './assign';\n\nconst store = new LZStorage({\n    compression: true\n});\n\n/**\n * Store library\n * @namespace libs\n * @type {object}\n * @private\n */\nexport const libs = {\n    /**\n     * Get's decompressed data from store\n     * @private\n     * @method getDataFromStore\n     * @memberof libs\n     * @param {string} path URL path\n     * @param {boolean} isHash Flag to determine if it's a pathname or hash\n     * @returns {*}\n     */\n    getDataFromStore(path, isHash) {\n        const paths = store.get('routeStore') || {};\n        return paths[`${isHash ? '#' : ''}${path}`];\n    },\n    /**\n     * @private\n     * @method setDataToStore\n     * @memberof libs\n     * @param {string} path URL path\n     * @param {boolean} isHash Flag to determine if it's a pathname or hash\n     * @param {any} data Data\n     * @returns {boolean}\n     */\n    setDataToStore(path, isHash, data) {\n        let paths = store.get('routeStore') || {};\n        if (paths[path]) {\n            if (\n                !data\n                || (\n                    typeof data === 'object'\n                    && Object.keys(data).length === 0\n                )\n            ) {\n                // Don't change existing data\n                return false;\n            }\n        }\n        const newPath = {};\n        newPath[`${isHash ? '#' : ''}${path}`] = data;\n        paths = assign({}, paths, newPath);\n        return store.set('routeStore', paths, true);\n    },\n    /**\n     * @namespace handlers\n     * @type {object[]}\n     * @private\n     */\n    handlers: []\n};","import { REG_ROUTE_PARAMS, REG_TRIM_SPECIALCHARS } from './constants';\n\n/**\n * Converts array like object to array\n * @param {any[]} arr Arraylike object\n */\nfunction toArray(arr) {\n    return Array.prototype.slice.call(arr);\n}\n\n/**\n * Parses current path and returns params object\n * @private\n * @param {string} expr Route expression\n * @param {string} path URL path\n * @returns {object}\n */\nexport function extractParams(expr, path = window.location.pathname) {\n    if (REG_ROUTE_PARAMS.test(expr)) {\n        const pathRegex = new RegExp(expr.replace(/\\//g, \"\\\\/\").replace(/:[^\\/\\\\]+/g, \"([^\\\\/]+)\"));\n        const params = {};\n        if (pathRegex.test(path)) {\n            REG_ROUTE_PARAMS.lastIndex = 0;\n            const keys = [].concat(toArray(expr.match(REG_ROUTE_PARAMS))).map(key => key.replace(REG_TRIM_SPECIALCHARS, ''));\n            const values = [].concat(toArray(path.match(pathRegex)));\n            values.shift();\n            keys.forEach((key, index) => {\n                params[key] = values[index];\n            });\n        }\n        return params;\n    }\n    return {};\n}","/**\n * Builds query string recursively\n * @private\n * @param {string[]} queryStringParts List of query string key value pairs\n * @param {*} key Key\n * @param {*} obj Value\n */\nfunction buildQueryString(queryStringParts, key, obj) {\n    if (obj && typeof obj === 'object') {\n        Object.keys(obj).forEach(obKey => {\n            buildQueryString(queryStringParts, `${key}[${obKey}]`, obj[obKey]);\n        });\n    } else if (['string', 'number', 'boolean', 'undefined', 'object'].indexOf(typeof obj) > -1) {\n        queryStringParts.push(`${key}=${obj}`);\n    }\n}\n\n/**\n * Converts an object to a query string\n * @private\n * @param {object} obj Object which should be converted to a string\n * @returns {string}\n */\nexport function toQueryString(obj) {\n    let queryStringParts = [];\n    if (obj && typeof obj === 'object') {\n        Object.keys(obj).forEach(key => {\n            buildQueryString(queryStringParts, key, obj[key]);\n        });\n        return queryStringParts.join('&');\n    } else if (typeof obj === 'string') {\n        return obj;\n    }\n    return '';\n}","import deparam from 'deparam.js';\nimport { POP_STATE, HASH_CHANGE, ROUTE_CHANGED, INVALID_ROUTE, REG_HASH_QUERY, REG_PATHNAME, CASE_INSENSITIVE_FLAG } from './constants';\nimport { libs } from './libs';\nimport { extractParams } from './params';\nimport { toQueryString } from './query';\nimport { assign } from './assign';\n\n// Abbreviated variables\nconst loc = window.location;\n\n/**\n * Safely trims string\n * @param {string} str String\n */\nfunction trim(str) {\n    return ((typeof str === 'string') ? str.trim() : '');\n}\n\n/**\n * Triggers \"route.changed\" event\n * @private\n * @param {object} config Route event configuration\n * @param {object} config.originalEvent Original \"popstate\" event object\n * @param {string} config.route route string\n * @param {string} config.type Type of event\n * @param {boolean} config.hash Flag that determines type of event expected\n * @param {object} config.originalData Original data persisted by history API\n */\nfunction triggerRoute({ originalEvent, route, type, hash, originalData }) {\n    trigger(\n        ROUTE_CHANGED,\n        {\n            originalEvent,\n            route,\n            type,\n            hash\n        },\n        originalData\n    );\n}\n\n/**\n * Checks if given route is valid\n * @private\n * @param {string} route Route string\n */\nfunction isValidRoute(route) {\n    return ((typeof route === 'string') ? REG_PATHNAME.test(route) : false);\n}\n\n/**\n * Adds a query string\n * @private\n * @param {string} route Route string\n * @param {string} qString Query string\n * @param {boolean} appendQString Append query string flag\n */\nfunction resolveQuery(route, isHash, queryString, append) {\n    queryString = trim(queryString.substring((queryString.charAt(0) === '?' ? 1 : 0)));\n    if (!isHash) {\n        if (append) {\n            return `${route}${loc.search}${(queryString ? `&${queryString}` : '')}`;\n        }\n        return `${route}${(queryString ? `?${queryString}` : '')}`;\n    }\n    return `${loc.pathname}${loc.search}#${route}${queryString ? `?${queryString}` : ''}`;\n}\n\n/**\n * Converts current query string into an object\n * @private\n */\nfunction getQueryParams() {\n    const qsObject = deparam(loc.search, false);\n    let hashStringParams = {};\n    const hashQuery = loc.hash.match(REG_HASH_QUERY);\n    if (hashQuery) {\n        hashStringParams = assign({}, hashStringParams, deparam(hashQuery[0], false));\n    }\n    return assign({}, qsObject, hashStringParams);\n}\n\n/**\n * Set route for given view\n * @private\n * @param {string|object} oRoute Route string or object\n * @param {boolean} replaceMode Replace mode\n * @param {boolean} noTrigger Do not trigger handler\n */\nexport function execRoute(route, replaceMode, noTrigger) {\n    let routeObject = typeof route === 'string' ? { route } : assign({}, route);\n    routeObject = assign({}, routeObject, {\n        replaceMode,\n        noTrigger\n    });\n    const {\n        route: sroute,\n        replaceMode: rm,\n        noTrigger: nt,\n        queryString: qs = '',\n        data,\n        title = null,\n        appendQuery\n    } = routeObject;\n    if (typeof sroute === 'string') {\n        const isHash = sroute.charAt(0) === '#' ? 1 : 0;\n        const routeParts = trim(sroute).split('?');\n        let pureRoute = routeParts[0];\n        let queryString = trim(routeParts[1]);\n        const routeMethod = `${rm ? 'replace' : 'push'}State`;\n        queryString = toQueryString(queryString || qs);\n        pureRoute = pureRoute.substring(isHash);\n        if (isValidRoute(pureRoute)) {\n            libs.setDataToStore(pureRoute, isHash === 1, data);\n            const completeRoute = resolveQuery(pureRoute, isHash === 1, queryString, appendQuery);\n            history[routeMethod]({ data }, title, completeRoute);\n            if (!nt) {\n                triggerRoute(\n                    {\n                        originalEvent: {},\n                        route: `${isHash ? '#' : ''}${pureRoute}`,\n                        type: (isHash ? HASH_CHANGE : POP_STATE),\n                        hash: (isHash === 1),\n                        originalData: {}\n                    }\n                );\n            }\n        } else {\n            throw new Error(INVALID_ROUTE);\n        }\n    }\n}\n\n/**\n * Binds generic route if route is passed as a list of URLs\n * @private\n * @param {string[]} route Array of routes\n * @param {*} handler Handler function\n */\nfunction bindGenericRoute(route, handler) {\n    if (libs.handlers.filter(ob => (ob.prevHandler === handler)).length) {\n        return;\n    }\n    bindRoute((...args) => {\n        if (typeof handler === 'function') {\n            const [e] = args;\n            let compareRoute = e.route;\n            if (compareRoute.charAt(0) === '#') {\n                compareRoute = compareRoute.substring(1);\n            }\n            if (route.indexOf(compareRoute) > -1) {\n                handler.apply(this, args);\n            } else if (\n                route.indexOf(`#${compareRoute}`) > -1\n                && e.hash\n            ) {\n                handler.apply(this, args);\n            }\n        }\n    }, handler);\n}\n\n/**\n * Attaches a route handler function\n * @private\n * @param {string} route Route string\n * @param {function} handler Callback function\n */\nexport function bindRoute(route, handler, prevHandler) {\n    // Resolve generic route\n    let isCaseInsensitive = false;\n    if (typeof route === 'function') {\n        prevHandler = handler;\n        handler = route;\n        route = '*';\n    }\n    if (Array.isArray(route)) {\n        bindGenericRoute(route, handler);\n        return;\n    }\n    if (route.indexOf(CASE_INSENSITIVE_FLAG) === 0) {\n        isCaseInsensitive = true;\n        route = route.substring(CASE_INSENSITIVE_FLAG.length);\n    }\n    const startIndex = route.charAt(0) === '#' ? 1 : 0;\n    route = route.substring(startIndex);\n    // Check existence\n    const exists = libs.handlers.filter(ob => (ob.handler === handler && ob.route === route)).length;\n    // Attach handler\n    if (!exists && typeof handler === 'function') {\n        libs.handlers.push({\n            eventName: ROUTE_CHANGED,\n            handler,\n            prevHandler,\n            route,\n            hash: startIndex === 1,\n            isCaseInsensitive\n        });\n    }\n    // Execute handler if matches current route (Replaces init method in version 2.0)\n    const { pathname, hash } = loc;\n    const paths = startIndex === 1 ? [hash] : [pathname, hash];\n    paths.filter(path => trim(path)).forEach(currentPath => {\n        let cRoute = route;\n        let cCurrentPath = currentPath;\n        if (isCaseInsensitive) {\n            cRoute = cRoute.toLowerCase();\n            cCurrentPath = cCurrentPath.toLowerCase();\n        }\n        const pathIndex = currentPath.charAt(0) === '#' ? 1 : 0;\n        const { hasMatch, data, params } = testRoute(cRoute, cCurrentPath);\n        if (hasMatch && typeof handler === 'function') {\n            handler({\n                route: currentPath,\n                hash: pathIndex === 1,\n                eventName: pathIndex === 1 ? HASH_CHANGE : POP_STATE,\n                data,\n                params,\n                query: getQueryParams(),\n                isCaseInsensitive\n            });\n        }\n    });\n}\n\n/**\n * Unbinds route handlers\n * @private\n * @param {string} route Route string\n * @param {function} handler Callback function\n */\nexport function unbindRoute(...args) {\n    let [route, handler] = args;\n    const prevLength = libs.handlers.length;\n    let isRouteList = false;\n    if (args.length === 0) {\n        libs.handlers.length = 0;\n    }\n    if (Array.isArray(route)) {\n        route = '*';\n        isRouteList = true;\n    }\n    libs.handlers = libs.handlers.filter(ob => {\n        if (args.length === 1 && typeof args[0] === 'string' && !isRouteList) {\n            return ob.route !== route;\n        }\n        // Check for generic route\n        if (args.length === 1 && typeof args[0] === 'function') {\n            handler = args[0];\n            route = '*'; // Generic route\n        }\n        return !(ob.route === route && (\n            ob.handler === handler\n            || ob.prevHandler === handler\n        ));\n    });\n    return (prevLength > libs.handlers.length);\n}\n\n\n/**\n * Compares route with current URL\n * @private\n * @param {string} route Route string\n * @param {string} url Current url\n * @param {object} params Parameters\n */\nfunction testRoute(route, url, originalData) {\n    originalData = assign(originalData);\n    const isHash = url.charAt(0) === '#';\n    if (isHash) {\n        url = url.substring(1);\n    }\n    const path = url.split('?')[0];\n    if (!!Object.keys(originalData).length) {\n        libs.setDataToStore(path, isHash, originalData); // Sync store with event data.\n    }\n    const data = libs.getDataFromStore(path, isHash);\n    const params = extractParams(route, url);\n    let hasMatch = Object.keys(params).length > 0 || (\n        isValidRoute(url) && ((route === url) || (route === '*'))\n    );\n    return {\n        hasMatch,\n        data,\n        params\n    };\n}\n\n/**\n * Triggers a router event\n * @private\n * @param {string} eventName Name of route event\n * @param {object} params Parameters\n */\nfunction execListeners(eventName, routeConfig, originalData) {\n    originalData = assign(originalData);\n    const { hash: isHash } = routeConfig;\n    const { hash, pathname } = loc;\n    libs.handlers.forEach(ob => {\n        if (ob.eventName === eventName) {\n            let cRoute = ob.route;\n            let cCurrentPath = (isHash ? hash : pathname);\n            if (ob.isCaseInsensitive) {\n                cRoute = cRoute.toLowerCase();\n                cCurrentPath = cCurrentPath.toLowerCase();\n            }\n            const { hasMatch, data, params } = testRoute(\n                cRoute,\n                cCurrentPath,\n                originalData\n            );\n            if (hasMatch && (!ob.hash || (ob.hash && isHash))) {\n                ob.handler(assign({}, routeConfig, {\n                    data,\n                    params,\n                    query: getQueryParams()\n                }));\n            }\n        }\n    });\n}\n\n/**\n * Internal method to trigger a routing event\n * @private\n */\nexport function trigger(...args) {\n    return execListeners.apply(this, args);\n}\n\n/**\n * Initializes router events\n * @private\n */\nexport function initRouterEvents() {\n    window.addEventListener(`${POP_STATE}`, function (e) {\n        const completePath = `${loc.pathname}${loc.hash}`;\n        const pathParts = completePath.split('#');\n        const pathname = pathParts[0];\n        const hashstring = pathParts[1];\n        let originalData = {};\n        if (e.state) {\n            const { data } = e.state;\n            if (data) {\n                originalData = data;\n            }\n        }\n        triggerRoute({\n            originalEvent: e,\n            route: pathname,\n            type: e.type,\n            hash: false,\n            originalData\n        });\n        if (hashstring) {\n            triggerRoute({\n                originalEvent: e,\n                route: `#${hashstring}`,\n                type: HASH_CHANGE,\n                hash: true,\n                originalData\n            });\n        }\n    });\n}","import { execRoute, bindRoute, unbindRoute, initRouterEvents, trigger } from './utils/helpers';\nimport { extractParams } from './utils/params';\nimport { CASE_INSENSITIVE_FLAG } from './utils/constants';\nimport { toQueryString } from './utils/query';\n\n/**\n * @namespace router\n * @public\n * @type {object}\n */\nconst router = {\n    /**\n     * @namespace api\n     * @memberof router\n     * @type {object}\n     */\n    api: {\n        /**\n         * Triggers a custom route event\n         * @method trigger\n         * @public\n         * @memberof router.api\n         * @param {...*} arguments\n         */\n        trigger(...args) {\n            return trigger.apply(this, args);\n        },\n        /**\n         * Extract parameters as an object if route has parameters\n         * @method extractParams\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        extractParams(...args) {\n            return extractParams.apply(this, args);\n        },\n        /**\n         * Converts object to query string\n         * @method toQueryString\n         * @public\n         * @memberof router.api\n         * @params {...*} arguments\n         */\n        toQueryString(...args) {\n            return toQueryString.apply(this, args);\n        }\n    },\n    /**\n     * Sets a route url\n     * @public\n     * @param {string|object} route Route object or URL\n     * @param {boolean} replaceMode Flag to enable replace mode\n     * @param {boolean} noTrigger Flag to disable handler while changing route\n     */\n    set(...args) {\n        return execRoute.apply(this, args);\n    }\n}\n\n/**\n * Attaches a route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction route(...args) {\n    return bindRoute.apply(this, args);\n}\n\n/**\n * Attaches case insensitive route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction routeIgnoreCase(firstArg, ...args) {\n    if (typeof firstArg === 'string') {\n        route.apply(this, [`${CASE_INSENSITIVE_FLAG}${firstArg}`, ...args]);\n    }\n}\n\n/**\n * Detaches a route handler\n * @public\n * @param {string|function} route Route string or handler function (in case of generic route)\n * @param {function} handler Handler function\n */\nfunction unroute(...args) {\n    return unbindRoute.apply(this, args);\n}\n\ninitRouterEvents();\n\nexport { router, route, routeIgnoreCase, unroute };"],"names":["HASH_CHANGE","POP_STATE","ROUTE_CHANGED","REG_ROUTE_PARAMS","REG_PATHNAME","REG_HASH_QUERY","REG_TRIM_SPECIALCHARS","INVALID_ROUTE","CASE_INSENSITIVE_FLAG","loopFunc","ref","target","Object","keys","forEach","key","assign","i","arguments","length","store","LZStorage","compression","libs","getDataFromStore","path","isHash","paths","get","setDataToStore","data","newPath","set","handlers","toArray","arr","Array","prototype","slice","call","extractParams","expr","window","location","pathname","test","pathRegex","RegExp","replace","params","lastIndex","concat","match","map","values","shift","index","buildQueryString","queryStringParts","obj","obKey","indexOf","push","toQueryString","join","loc","trim","str","triggerRoute","originalEvent","route","type","hash","originalData","trigger","isValidRoute","resolveQuery","queryString","append","substring","charAt","search","getQueryParams","qsObject","deparam","hashStringParams","hashQuery","execRoute","replaceMode","noTrigger","routeObject","sroute","rm","nt","qs","title","appendQuery","routeParts","split","pureRoute","routeMethod","completeRoute","history","Error","bindGenericRoute","handler","filter","ob","prevHandler","bindRoute","args","e","compareRoute","apply","isCaseInsensitive","isArray","startIndex","exists","eventName","currentPath","cRoute","cCurrentPath","toLowerCase","pathIndex","testRoute","hasMatch","query","unbindRoute","prevLength","isRouteList","url","execListeners","routeConfig","initRouterEvents","addEventListener","completePath","pathParts","hashstring","state","router","api","routeIgnoreCase","firstArg","unroute"],"mappings":"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"}